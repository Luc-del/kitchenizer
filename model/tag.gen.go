// Code generated by "enumer -type=Tag -text -output=tag.gen.go"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _TagName = "HighProteinFast"

var _TagIndex = [...]uint8{0, 11, 15}

const _TagLowerName = "highproteinfast"

func (i Tag) String() string {
	if i < 0 || i >= Tag(len(_TagIndex)-1) {
		return fmt.Sprintf("Tag(%d)", i)
	}
	return _TagName[_TagIndex[i]:_TagIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TagNoOp() {
	var x [1]struct{}
	_ = x[HighProtein-(0)]
	_ = x[Fast-(1)]
}

var _TagValues = []Tag{HighProtein, Fast}

var _TagNameToValueMap = map[string]Tag{
	_TagName[0:11]:       HighProtein,
	_TagLowerName[0:11]:  HighProtein,
	_TagName[11:15]:      Fast,
	_TagLowerName[11:15]: Fast,
}

var _TagNames = []string{
	_TagName[0:11],
	_TagName[11:15],
}

// TagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TagString(s string) (Tag, error) {
	if val, ok := _TagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Tag values", s)
}

// TagValues returns all values of the enum
func TagValues() []Tag {
	return _TagValues
}

// TagStrings returns a slice of all String values of the enum
func TagStrings() []string {
	strs := make([]string, len(_TagNames))
	copy(strs, _TagNames)
	return strs
}

// IsATag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Tag) IsATag() bool {
	for _, v := range _TagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Tag
func (i Tag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Tag
func (i *Tag) UnmarshalText(text []byte) error {
	var err error
	*i, err = TagString(string(text))
	return err
}
