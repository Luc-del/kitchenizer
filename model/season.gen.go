// Code generated by "enumer -type=Season -text -output=season.gen.go"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _SeasonName = "WinterSpringSummerAutumn"

var _SeasonIndex = [...]uint8{0, 6, 12, 18, 24}

const _SeasonLowerName = "winterspringsummerautumn"

func (i Season) String() string {
	if i < 0 || i >= Season(len(_SeasonIndex)-1) {
		return fmt.Sprintf("Season(%d)", i)
	}
	return _SeasonName[_SeasonIndex[i]:_SeasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SeasonNoOp() {
	var x [1]struct{}
	_ = x[Winter-(0)]
	_ = x[Spring-(1)]
	_ = x[Summer-(2)]
	_ = x[Autumn-(3)]
}

var _SeasonValues = []Season{Winter, Spring, Summer, Autumn}

var _SeasonNameToValueMap = map[string]Season{
	_SeasonName[0:6]:        Winter,
	_SeasonLowerName[0:6]:   Winter,
	_SeasonName[6:12]:       Spring,
	_SeasonLowerName[6:12]:  Spring,
	_SeasonName[12:18]:      Summer,
	_SeasonLowerName[12:18]: Summer,
	_SeasonName[18:24]:      Autumn,
	_SeasonLowerName[18:24]: Autumn,
}

var _SeasonNames = []string{
	_SeasonName[0:6],
	_SeasonName[6:12],
	_SeasonName[12:18],
	_SeasonName[18:24],
}

// SeasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SeasonString(s string) (Season, error) {
	if val, ok := _SeasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SeasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Season values", s)
}

// SeasonValues returns all values of the enum
func SeasonValues() []Season {
	return _SeasonValues
}

// SeasonStrings returns a slice of all String values of the enum
func SeasonStrings() []string {
	strs := make([]string, len(_SeasonNames))
	copy(strs, _SeasonNames)
	return strs
}

// IsASeason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Season) IsASeason() bool {
	for _, v := range _SeasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Season
func (i Season) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Season
func (i *Season) UnmarshalText(text []byte) error {
	var err error
	*i, err = SeasonString(string(text))
	return err
}
