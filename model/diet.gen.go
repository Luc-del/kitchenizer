// Code generated by "enumer -type=Diet -text -output=diet.gen.go"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _DietName = "GlutenFreeVegetarianVegan"

var _DietIndex = [...]uint8{0, 10, 20, 25}

const _DietLowerName = "glutenfreevegetarianvegan"

func (i Diet) String() string {
	if i < 0 || i >= Diet(len(_DietIndex)-1) {
		return fmt.Sprintf("Diet(%d)", i)
	}
	return _DietName[_DietIndex[i]:_DietIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DietNoOp() {
	var x [1]struct{}
	_ = x[GlutenFree-(0)]
	_ = x[Vegetarian-(1)]
	_ = x[Vegan-(2)]
}

var _DietValues = []Diet{GlutenFree, Vegetarian, Vegan}

var _DietNameToValueMap = map[string]Diet{
	_DietName[0:10]:       GlutenFree,
	_DietLowerName[0:10]:  GlutenFree,
	_DietName[10:20]:      Vegetarian,
	_DietLowerName[10:20]: Vegetarian,
	_DietName[20:25]:      Vegan,
	_DietLowerName[20:25]: Vegan,
}

var _DietNames = []string{
	_DietName[0:10],
	_DietName[10:20],
	_DietName[20:25],
}

// DietString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DietString(s string) (Diet, error) {
	if val, ok := _DietNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DietNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Diet values", s)
}

// DietValues returns all values of the enum
func DietValues() []Diet {
	return _DietValues
}

// DietStrings returns a slice of all String values of the enum
func DietStrings() []string {
	strs := make([]string, len(_DietNames))
	copy(strs, _DietNames)
	return strs
}

// IsADiet returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Diet) IsADiet() bool {
	for _, v := range _DietValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Diet
func (i Diet) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Diet
func (i *Diet) UnmarshalText(text []byte) error {
	var err error
	*i, err = DietString(string(text))
	return err
}
